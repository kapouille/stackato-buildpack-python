#!/usr/bin/env python
from copy import copy
from utils import *
import sys
from os import environ, mkdir
from os.path import exists, join
from subprocess import check_output, CalledProcessError
import re


def get_python(build_dir):
    python_version = environ.get('PYTHON_VERSION', '2.7')

    runtime_file_path = join(build_dir, 'runtime.txt')
    if exists(runtime_file_path):
        python_version_full = open(runtime_file_path).read().strip()

        match = re.search(r'python-([0-9]\.[0-9])(\.[0-9])*',
                          python_version_full)
        if match:
            python_version = match.group(1)
        else:
            print_warning("Runtime version {} "
                          "not supported".format(python_version_full))

        if python_version_full != python_version:
            command = [
                "/opt/ActivePython-{version}"
                "/bin/python{version}".format(version=python_version),
                "-c",
                'import sys; '
                'print('
                '"{0.major}.{0.minor}.{0.micro}"'
                '.format(sys.version_info))'
            ]
            try:
                actual_version = check_output(command, shell=True).strip()
            except CalledProcessError as error:
                print_warning(
                    "Could not check installed python "
                    "version " + python_version_full,
                    str(error))
                sys.exit(2)

            if actual_version != python_version_full:
                print_warning(
                    "Requested Python version {} "
                    "did not match the installed "
                    "version {}".format(python_version_full, actual_version))
                sys.exit(2)

    if not exists("/opt/ActivePython-" + python_version):
        print_warning("ActivePython-python_version is not installed")
        sys.exit(2)

    print_step("Using Python-{} (ActivePython)".format(python_version))

    return "/opt/ActivePython-{}/bin".format(python_version), python_version


def pip_pypm_version(executable):
    version = check_output(
        "{} --version".format(executable),
        shell=True)
    return version[:version.find('\n')]


def process_pypm_requirements(build_dir, cache_dir, environment):
    requirements = join(build_dir, "requirements.pypm")

    if exists(requirements):
        print_step("Installing pypm requirements")

        options = environ.get('PYPM_OPTS', '')

        print_step("Installing requirements via " + pip_pypm_version("pypm"))
        if options:
            print_indent("Using options: " + options)

        run("pypm", "install",
            options,
            "--requirements", requirements,
            "--user",
            env=environment)


def process_pip(pip, pip_opts, cache_dir, environment, what):
        print_step("Generating necessary wheel packages using " + pip_pypm_version(pip))
        run(pip, "wheel",
            pip_opts,
            "--download-cache", cache_dir,
            "--use-wheel",
            "--find-links", cache_dir,
            "--wheel-dir", cache_dir,
            what,
            env=environment)

        print_step("Installing requirements via " + pip_pypm_version(pip))
        run(pip, "install",
            pip_opts,
            "--use-wheel",
            "--no-index",
            "--upgrade",
            "--user",
            "--find-links", cache_dir,
            what,
            env=environment)


def install_application(build_dir, cache_dir, environment):
    try:
        pip_opts = environ.get('PIP_OPTS', '')
        print_step("Upgrading pip")
        run("pip", "install",
            pip_opts,
            "--download-cache", cache_dir,
            "--user",
            "--upgrade",
            "pip",
            env=environment)
        pip = join(environment["PYTHONUSERBASE"], "bin", "pip")

        print_step("Installing wheel via " + pip_pypm_version(pip))
        run(pip, "install",
            pip_opts,
            "--download-cache", cache_dir,
            "--user",
            "--upgrade",
            "wheel",
            env=environment)

        requirements = join(build_dir, "requirements.txt")
        if exists(requirements):
            print_step("Installing pip requirements")
            process_pip(pip, pip_opts, cache_dir, environment,
                        "-r " + requirements)
        process_pypm_requirements(build_dir, cache_dir, environment)

        if exists(join(build_dir, "setup.py")):
            print_step("Installing application")
            process_pip(pip, pip_opts, cache_dir, environment,
                        build_dir)

        print_step("Installed packages:")
        run(pip, "freeze")

    except CalledProcessError as error:
        print_warning("The installation failed:",
                      str(error))
        if error.output:
            print_indent(*error.output.split("\n"))
        sys.exit(2)


def build_runtime_environment(build_dir, python_dir, python_version, env):
    print_step("Building runtime environment")
    profile_d_dirname = join(build_dir, ".profile.d")
    mkdir(profile_d_dirname)
    with open(join(profile_d_dirname, "python.sh"), "w+") as f:

        f.write("export PYTHON_VERSION={}\n".format(python_version))
        f.write('PATH="{}/bin:{}:$PATH"\n'.format(env["PYTHONUSERBASE"],
                                                  python_dir))
        f.write("export PYTHONUSERBASE={}\n".format(env["PYTHONUSERBASE"]))
        f.write("export PYTHONUNBUFFERED=True\n")


def main():
    build_dir = sys.argv[1]
    cache_dir = environ.get("PYTHON_CACHE_DIR", sys.argv[2])

    env = copy(environ)
    env["PYTHONUSERBASE"] = "/app/.python"

    python_dir, python_version = get_python(build_dir)

    install_application(build_dir, cache_dir, env)

    build_runtime_environment(build_dir, python_dir, python_version, env)


if __name__ == "__main__":
    main()
